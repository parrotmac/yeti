// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_tree as tree;

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, tree::MethodErr>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, tree::MethodErr>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), tree::MethodErr>;
}

pub fn org_freedesktop_dbus_properties_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Signal: Default,
    T: OrgFreedesktopDBusProperties,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.DBus.Properties", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let interface_name: &str = i.read()?;
        let property_name: &str = i.read()?;
        let d = fclone(minfo);
        let value = d.get(interface_name, property_name)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(value);
        Ok(vec!(rm))
    };
    let m = factory.method("Get", Default::default(), h);
    let m = m.in_arg(("interface_name", "s"));
    let m = m.in_arg(("property_name", "s"));
    let m = m.out_arg(("value", "v"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let interface_name: &str = i.read()?;
        let d = fclone(minfo);
        let properties = d.get_all(interface_name)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(properties);
        Ok(vec!(rm))
    };
    let m = factory.method("GetAll", Default::default(), h);
    let m = m.in_arg(("interface_name", "s"));
    let m = m.out_arg(("properties", "a{sv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let interface_name: &str = i.read()?;
        let property_name: &str = i.read()?;
        let value: arg::Variant<Box<dyn arg::RefArg>> = i.read()?;
        let d = fclone(minfo);
        d.set(interface_name, property_name, value)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Set", Default::default(), h);
    let m = m.in_arg(("interface_name", "s"));
    let m = m.in_arg(("property_name", "s"));
    let m = m.in_arg(("value", "v"));
    let i = i.add_m(m);
    let s = factory.signal("PropertiesChanged", Default::default());
    let s = s.arg(("interface_name", "s"));
    let s = s.arg(("changed_properties", "a{sv}"));
    let s = s.arg(("invalidated_properties", "as"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, tree::MethodErr>;
}

pub fn org_freedesktop_dbus_introspectable_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgFreedesktopDBusIntrospectable,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.DBus.Introspectable", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let xml_data = d.introspect()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(xml_data);
        Ok(vec!(rm))
    };
    let m = factory.method("Introspect", Default::default(), h);
    let m = m.out_arg(("xml_data", "s"));
    let i = i.add_m(m);
    i
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), tree::MethodErr>;
    fn get_machine_id(&self) -> Result<String, tree::MethodErr>;
}

pub fn org_freedesktop_dbus_peer_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgFreedesktopDBusPeer,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.DBus.Peer", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.ping()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Ping", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let machine_uuid = d.get_machine_id()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(machine_uuid);
        Ok(vec!(rm))
    };
    let m = factory.method("GetMachineId", Default::default(), h);
    let m = m.out_arg(("machine_uuid", "s"));
    let i = i.add_m(m);
    i
}

pub trait OrgFreedesktopModemManager1ModemLocation {
    fn setup(&self, sources: u32, signal_location: bool) -> Result<(), tree::MethodErr>;
    fn get_location(&self) -> Result<::std::collections::HashMap<u32, arg::Variant<Box<dyn arg::RefArg + 'static>>>, tree::MethodErr>;
    fn set_supl_server(&self, supl: &str) -> Result<(), tree::MethodErr>;
    fn inject_assistance_data(&self, data: Vec<u8>) -> Result<(), tree::MethodErr>;
    fn set_gps_refresh_rate(&self, rate: u32) -> Result<(), tree::MethodErr>;
    fn capabilities(&self) -> Result<u32, tree::MethodErr>;
    fn supported_assistance_data(&self) -> Result<u32, tree::MethodErr>;
    fn enabled(&self) -> Result<u32, tree::MethodErr>;
    fn signals_location(&self) -> Result<bool, tree::MethodErr>;
    fn location(&self) -> Result<::std::collections::HashMap<u32, arg::Variant<Box<dyn arg::RefArg + 'static>>>, tree::MethodErr>;
    fn supl_server(&self) -> Result<String, tree::MethodErr>;
    fn assistance_data_servers(&self) -> Result<Vec<String>, tree::MethodErr>;
    fn gps_refresh_rate(&self) -> Result<u32, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_location_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopModemManager1ModemLocation,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Location", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let sources: u32 = i.read()?;
        let signal_location: bool = i.read()?;
        let d = fclone(minfo);
        d.setup(sources, signal_location)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Setup", Default::default(), h);
    let m = m.in_arg(("sources", "u"));
    let m = m.in_arg(("signal_location", "b"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let location = d.get_location()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(location);
        Ok(vec!(rm))
    };
    let m = factory.method("GetLocation", Default::default(), h);
    let m = m.out_arg(("Location", "a{uv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let supl: &str = i.read()?;
        let d = fclone(minfo);
        d.set_supl_server(supl)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetSuplServer", Default::default(), h);
    let m = m.in_arg(("supl", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let data: Vec<u8> = i.read()?;
        let d = fclone(minfo);
        d.inject_assistance_data(data)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("InjectAssistanceData", Default::default(), h);
    let m = m.in_arg(("data", "ay"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let rate: u32 = i.read()?;
        let d = fclone(minfo);
        d.set_gps_refresh_rate(rate)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetGpsRefreshRate", Default::default(), h);
    let m = m.in_arg(("rate", "u"));
    let i = i.add_m(m);

    let p = factory.property::<u32, _>("Capabilities", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.capabilities()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("SupportedAssistanceData", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_assistance_data()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("Enabled", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.enabled()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("SignalsLocation", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.signals_location()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<::std::collections::HashMap<u32, arg::Variant<Box<dyn arg::RefArg>>>, _>("Location", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.location()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("SuplServer", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supl_server()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<&str>, _>("AssistanceDataServers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.assistance_data_servers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("GpsRefreshRate", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.gps_refresh_rate()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}

pub trait OrgFreedesktopModemManager1ModemSignal {
    fn setup(&self, rate: u32) -> Result<(), tree::MethodErr>;
    fn rate(&self) -> Result<u32, tree::MethodErr>;
    fn cdma(&self) -> Result<arg::PropMap, tree::MethodErr>;
    fn evdo(&self) -> Result<arg::PropMap, tree::MethodErr>;
    fn gsm(&self) -> Result<arg::PropMap, tree::MethodErr>;
    fn umts(&self) -> Result<arg::PropMap, tree::MethodErr>;
    fn lte(&self) -> Result<arg::PropMap, tree::MethodErr>;
    fn nr5g(&self) -> Result<arg::PropMap, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_signal_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopModemManager1ModemSignal,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Signal", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let rate: u32 = i.read()?;
        let d = fclone(minfo);
        d.setup(rate)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Setup", Default::default(), h);
    let m = m.in_arg(("rate", "u"));
    let i = i.add_m(m);

    let p = factory.property::<u32, _>("Rate", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.rate()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Cdma", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.cdma()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Evdo", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.evdo()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Gsm", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.gsm()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Umts", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.umts()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Lte", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.lte()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("Nr5g", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.nr5g()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}

pub trait OrgFreedesktopModemManager1ModemModem3gppUssd {
    fn initiate(&self, command: &str) -> Result<String, tree::MethodErr>;
    fn respond(&self, response: &str) -> Result<String, tree::MethodErr>;
    fn cancel(&self) -> Result<(), tree::MethodErr>;
    fn state(&self) -> Result<u32, tree::MethodErr>;
    fn network_notification(&self) -> Result<String, tree::MethodErr>;
    fn network_request(&self) -> Result<String, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_modem3gpp_ussd_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopModemManager1ModemModem3gppUssd,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let command: &str = i.read()?;
        let d = fclone(minfo);
        let reply = d.initiate(command)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(reply);
        Ok(vec!(rm))
    };
    let m = factory.method("Initiate", Default::default(), h);
    let m = m.in_arg(("command", "s"));
    let m = m.out_arg(("reply", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let response: &str = i.read()?;
        let d = fclone(minfo);
        let reply = d.respond(response)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(reply);
        Ok(vec!(rm))
    };
    let m = factory.method("Respond", Default::default(), h);
    let m = m.in_arg(("response", "s"));
    let m = m.out_arg(("reply", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.cancel()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Cancel", Default::default(), h);
    let i = i.add_m(m);

    let p = factory.property::<u32, _>("State", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.state()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("NetworkNotification", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.network_notification()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("NetworkRequest", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.network_request()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}

pub trait OrgFreedesktopModemManager1ModemMessaging {
    fn list(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn delete(&self, path: dbus::Path) -> Result<(), tree::MethodErr>;
    fn create(&self, properties: arg::PropMap) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn messages(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn supported_storages(&self) -> Result<Vec<u32>, tree::MethodErr>;
    fn default_storage(&self) -> Result<u32, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_messaging_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: OrgFreedesktopModemManager1ModemMessaging,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Messaging", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let result = d.list()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(result);
        Ok(vec!(rm))
    };
    let m = factory.method("List", Default::default(), h);
    let m = m.out_arg(("result", "ao"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let path: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.delete(path)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Delete", Default::default(), h);
    let m = m.in_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let properties: arg::PropMap = i.read()?;
        let d = fclone(minfo);
        let path = d.create(properties)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(path);
        Ok(vec!(rm))
    };
    let m = factory.method("Create", Default::default(), h);
    let m = m.in_arg(("properties", "a{sv}"));
    let m = m.out_arg(("path", "o"));
    let i = i.add_m(m);

    let p = factory.property::<Vec<dbus::Path>, _>("Messages", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.messages()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<u32>, _>("SupportedStorages", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_storages()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("DefaultStorage", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.default_storage()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("Added", Default::default());
    let s = s.arg(("path", "o"));
    let s = s.arg(("received", "b"));
    let i = i.add_s(s);
    let s = factory.signal("Deleted", Default::default());
    let s = s.arg(("path", "o"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemMessagingAdded {
    pub path: dbus::Path<'static>,
    pub received: bool,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemMessagingAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
        arg::RefArg::append(&self.received, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemMessagingAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemMessagingAdded {
            path: i.read()?,
            received: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemMessagingAdded {
    const NAME: &'static str = "Added";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Messaging";
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemMessagingDeleted {
    pub path: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemMessagingDeleted {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemMessagingDeleted {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemMessagingDeleted {
            path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemMessagingDeleted {
    const NAME: &'static str = "Deleted";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Messaging";
}

pub trait OrgFreedesktopModemManager1Modem {
    fn enable(&self, enable: bool) -> Result<(), tree::MethodErr>;
    fn list_bearers(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn create_bearer(&self, properties: arg::PropMap) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn delete_bearer(&self, bearer: dbus::Path) -> Result<(), tree::MethodErr>;
    fn reset(&self) -> Result<(), tree::MethodErr>;
    fn factory_reset(&self, code: &str) -> Result<(), tree::MethodErr>;
    fn set_power_state(&self, state: u32) -> Result<(), tree::MethodErr>;
    fn set_current_capabilities(&self, capabilities: u32) -> Result<(), tree::MethodErr>;
    fn set_current_modes(&self, modes: (u32, u32)) -> Result<(), tree::MethodErr>;
    fn set_current_bands(&self, bands: Vec<u32>) -> Result<(), tree::MethodErr>;
    fn set_primary_sim_slot(&self, sim_slot: u32) -> Result<(), tree::MethodErr>;
    fn command(&self, cmd: &str, timeout: u32) -> Result<String, tree::MethodErr>;
    fn sim(&self) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn sim_slots(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn primary_sim_slot(&self) -> Result<u32, tree::MethodErr>;
    fn bearers(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn supported_capabilities(&self) -> Result<Vec<u32>, tree::MethodErr>;
    fn current_capabilities(&self) -> Result<u32, tree::MethodErr>;
    fn max_bearers(&self) -> Result<u32, tree::MethodErr>;
    fn max_active_bearers(&self) -> Result<u32, tree::MethodErr>;
    fn manufacturer(&self) -> Result<String, tree::MethodErr>;
    fn model(&self) -> Result<String, tree::MethodErr>;
    fn revision(&self) -> Result<String, tree::MethodErr>;
    fn carrier_configuration(&self) -> Result<String, tree::MethodErr>;
    fn carrier_configuration_revision(&self) -> Result<String, tree::MethodErr>;
    fn hardware_revision(&self) -> Result<String, tree::MethodErr>;
    fn device_identifier(&self) -> Result<String, tree::MethodErr>;
    fn device(&self) -> Result<String, tree::MethodErr>;
    fn drivers(&self) -> Result<Vec<String>, tree::MethodErr>;
    fn plugin(&self) -> Result<String, tree::MethodErr>;
    fn primary_port(&self) -> Result<String, tree::MethodErr>;
    fn ports(&self) -> Result<Vec<(String, u32)>, tree::MethodErr>;
    fn equipment_identifier(&self) -> Result<String, tree::MethodErr>;
    fn unlock_required(&self) -> Result<u32, tree::MethodErr>;
    fn unlock_retries(&self) -> Result<::std::collections::HashMap<u32, u32>, tree::MethodErr>;
    fn state(&self) -> Result<i32, tree::MethodErr>;
    fn state_failed_reason(&self) -> Result<u32, tree::MethodErr>;
    fn access_technologies(&self) -> Result<u32, tree::MethodErr>;
    fn signal_quality(&self) -> Result<(u32, bool), tree::MethodErr>;
    fn own_numbers(&self) -> Result<Vec<String>, tree::MethodErr>;
    fn power_state(&self) -> Result<u32, tree::MethodErr>;
    fn supported_modes(&self) -> Result<Vec<(u32, u32)>, tree::MethodErr>;
    fn current_modes(&self) -> Result<(u32, u32), tree::MethodErr>;
    fn supported_bands(&self) -> Result<Vec<u32>, tree::MethodErr>;
    fn current_bands(&self) -> Result<Vec<u32>, tree::MethodErr>;
    fn supported_ip_families(&self) -> Result<u32, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: OrgFreedesktopModemManager1Modem,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let enable: bool = i.read()?;
        let d = fclone(minfo);
        d.enable(enable)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Enable", Default::default(), h);
    let m = m.in_arg(("enable", "b"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let bearers = d.list_bearers()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(bearers);
        Ok(vec!(rm))
    };
    let m = factory.method("ListBearers", Default::default(), h);
    let m = m.out_arg(("bearers", "ao"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let properties: arg::PropMap = i.read()?;
        let d = fclone(minfo);
        let path = d.create_bearer(properties)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(path);
        Ok(vec!(rm))
    };
    let m = factory.method("CreateBearer", Default::default(), h);
    let m = m.in_arg(("properties", "a{sv}"));
    let m = m.out_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let bearer: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.delete_bearer(bearer)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("DeleteBearer", Default::default(), h);
    let m = m.in_arg(("bearer", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.reset()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Reset", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let code: &str = i.read()?;
        let d = fclone(minfo);
        d.factory_reset(code)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("FactoryReset", Default::default(), h);
    let m = m.in_arg(("code", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let state: u32 = i.read()?;
        let d = fclone(minfo);
        d.set_power_state(state)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetPowerState", Default::default(), h);
    let m = m.in_arg(("state", "u"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let capabilities: u32 = i.read()?;
        let d = fclone(minfo);
        d.set_current_capabilities(capabilities)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetCurrentCapabilities", Default::default(), h);
    let m = m.in_arg(("capabilities", "u"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let modes: (u32, u32) = i.read()?;
        let d = fclone(minfo);
        d.set_current_modes(modes)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetCurrentModes", Default::default(), h);
    let m = m.in_arg(("modes", "(uu)"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let bands: Vec<u32> = i.read()?;
        let d = fclone(minfo);
        d.set_current_bands(bands)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetCurrentBands", Default::default(), h);
    let m = m.in_arg(("bands", "au"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let sim_slot: u32 = i.read()?;
        let d = fclone(minfo);
        d.set_primary_sim_slot(sim_slot)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetPrimarySimSlot", Default::default(), h);
    let m = m.in_arg(("sim_slot", "u"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let cmd: &str = i.read()?;
        let timeout: u32 = i.read()?;
        let d = fclone(minfo);
        let response = d.command(cmd, timeout)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(response);
        Ok(vec!(rm))
    };
    let m = factory.method("Command", Default::default(), h);
    let m = m.in_arg(("cmd", "s"));
    let m = m.in_arg(("timeout", "u"));
    let m = m.out_arg(("response", "s"));
    let i = i.add_m(m);

    let p = factory.property::<dbus::Path, _>("Sim", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.sim()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<dbus::Path>, _>("SimSlots", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.sim_slots()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("PrimarySimSlot", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.primary_sim_slot()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<dbus::Path>, _>("Bearers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.bearers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<u32>, _>("SupportedCapabilities", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_capabilities()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("CurrentCapabilities", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.current_capabilities()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("MaxBearers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.max_bearers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("MaxActiveBearers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.max_active_bearers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Manufacturer", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.manufacturer()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Model", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.model()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Revision", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.revision()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("CarrierConfiguration", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.carrier_configuration()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("CarrierConfigurationRevision", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.carrier_configuration_revision()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("HardwareRevision", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.hardware_revision()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("DeviceIdentifier", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.device_identifier()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Device", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.device()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<&str>, _>("Drivers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.drivers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Plugin", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.plugin()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("PrimaryPort", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.primary_port()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<(&str, u32)>, _>("Ports", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.ports()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("EquipmentIdentifier", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.equipment_identifier()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("UnlockRequired", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.unlock_required()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<::std::collections::HashMap<u32, u32>, _>("UnlockRetries", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.unlock_retries()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<i32, _>("State", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.state()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("StateFailedReason", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.state_failed_reason()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("AccessTechnologies", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.access_technologies()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<(u32, bool), _>("SignalQuality", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.signal_quality()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<&str>, _>("OwnNumbers", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.own_numbers()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("PowerState", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.power_state()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<(u32, u32)>, _>("SupportedModes", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_modes()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<(u32, u32), _>("CurrentModes", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.current_modes()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<u32>, _>("SupportedBands", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_bands()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<u32>, _>("CurrentBands", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.current_bands()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("SupportedIpFamilies", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.supported_ip_families()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("StateChanged", Default::default());
    let s = s.arg(("old", "i"));
    let s = s.arg(("new", "i"));
    let s = s.arg(("reason", "u"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemStateChanged {
    pub old: i32,
    pub new: i32,
    pub reason: u32,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.old, i);
        arg::RefArg::append(&self.new, i);
        arg::RefArg::append(&self.reason, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemStateChanged {
            old: i.read()?,
            new: i.read()?,
            reason: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemStateChanged {
    const NAME: &'static str = "StateChanged";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem";
}

pub trait OrgFreedesktopModemManager1ModemTime {
    fn get_network_time(&self) -> Result<String, tree::MethodErr>;
    fn network_timezone(&self) -> Result<arg::PropMap, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_time_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: OrgFreedesktopModemManager1ModemTime,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Time", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let time = d.get_network_time()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(time);
        Ok(vec!(rm))
    };
    let m = factory.method("GetNetworkTime", Default::default(), h);
    let m = m.out_arg(("time", "s"));
    let i = i.add_m(m);

    let p = factory.property::<arg::PropMap, _>("NetworkTimezone", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.network_timezone()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("NetworkTimeChanged", Default::default());
    let s = s.arg(("time", "s"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemTimeNetworkTimeChanged {
    pub time: String,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemTimeNetworkTimeChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.time, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemTimeNetworkTimeChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemTimeNetworkTimeChanged {
            time: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemTimeNetworkTimeChanged {
    const NAME: &'static str = "NetworkTimeChanged";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Time";
}

pub trait OrgFreedesktopModemManager1ModemVoice {
    fn list_calls(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn delete_call(&self, path: dbus::Path) -> Result<(), tree::MethodErr>;
    fn create_call(&self, properties: arg::PropMap) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn hold_and_accept(&self) -> Result<(), tree::MethodErr>;
    fn hangup_and_accept(&self) -> Result<(), tree::MethodErr>;
    fn hangup_all(&self) -> Result<(), tree::MethodErr>;
    fn transfer(&self) -> Result<(), tree::MethodErr>;
    fn call_waiting_setup(&self, enable: bool) -> Result<(), tree::MethodErr>;
    fn call_waiting_query(&self) -> Result<bool, tree::MethodErr>;
    fn calls(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn emergency_only(&self) -> Result<bool, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_voice_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: OrgFreedesktopModemManager1ModemVoice,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Voice", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let result = d.list_calls()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(result);
        Ok(vec!(rm))
    };
    let m = factory.method("ListCalls", Default::default(), h);
    let m = m.out_arg(("result", "ao"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let path: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.delete_call(path)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("DeleteCall", Default::default(), h);
    let m = m.in_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let properties: arg::PropMap = i.read()?;
        let d = fclone(minfo);
        let path = d.create_call(properties)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(path);
        Ok(vec!(rm))
    };
    let m = factory.method("CreateCall", Default::default(), h);
    let m = m.in_arg(("properties", "a{sv}"));
    let m = m.out_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.hold_and_accept()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("HoldAndAccept", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.hangup_and_accept()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("HangupAndAccept", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.hangup_all()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("HangupAll", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.transfer()?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Transfer", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let enable: bool = i.read()?;
        let d = fclone(minfo);
        d.call_waiting_setup(enable)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("CallWaitingSetup", Default::default(), h);
    let m = m.in_arg(("enable", "b"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let status = d.call_waiting_query()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(status);
        Ok(vec!(rm))
    };
    let m = factory.method("CallWaitingQuery", Default::default(), h);
    let m = m.out_arg(("status", "b"));
    let i = i.add_m(m);

    let p = factory.property::<Vec<dbus::Path>, _>("Calls", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.calls()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("EmergencyOnly", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.emergency_only()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("CallAdded", Default::default());
    let s = s.arg(("path", "o"));
    let i = i.add_s(s);
    let s = factory.signal("CallDeleted", Default::default());
    let s = s.arg(("path", "o"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemVoiceCallAdded {
    pub path: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemVoiceCallAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemVoiceCallAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemVoiceCallAdded {
            path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemVoiceCallAdded {
    const NAME: &'static str = "CallAdded";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Voice";
}

#[derive(Debug)]
pub struct OrgFreedesktopModemManager1ModemVoiceCallDeleted {
    pub path: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopModemManager1ModemVoiceCallDeleted {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
    }
}

impl arg::ReadAll for OrgFreedesktopModemManager1ModemVoiceCallDeleted {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopModemManager1ModemVoiceCallDeleted {
            path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopModemManager1ModemVoiceCallDeleted {
    const NAME: &'static str = "CallDeleted";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Voice";
}

pub trait OrgFreedesktopModemManager1ModemModem3gpp {
    fn register(&self, operator_id: &str) -> Result<(), tree::MethodErr>;
    fn scan(&self) -> Result<Vec<arg::PropMap>, tree::MethodErr>;
    fn set_eps_ue_mode_operation(&self, mode: u32) -> Result<(), tree::MethodErr>;
    fn set_initial_eps_bearer_settings(&self, settings: arg::PropMap) -> Result<(), tree::MethodErr>;
    fn imei(&self) -> Result<String, tree::MethodErr>;
    fn registration_state(&self) -> Result<u32, tree::MethodErr>;
    fn operator_code(&self) -> Result<String, tree::MethodErr>;
    fn operator_name(&self) -> Result<String, tree::MethodErr>;
    fn enabled_facility_locks(&self) -> Result<u32, tree::MethodErr>;
    fn subscription_state(&self) -> Result<u32, tree::MethodErr>;
    fn eps_ue_mode_operation(&self) -> Result<u32, tree::MethodErr>;
    fn pco(&self) -> Result<Vec<(u32, bool, Vec<u8>)>, tree::MethodErr>;
    fn initial_eps_bearer(&self) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn initial_eps_bearer_settings(&self) -> Result<arg::PropMap, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_modem3gpp_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopModemManager1ModemModem3gpp,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Modem3gpp", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let operator_id: &str = i.read()?;
        let d = fclone(minfo);
        d.register(operator_id)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Register", Default::default(), h);
    let m = m.in_arg(("operator_id", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let results = d.scan()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(results);
        Ok(vec!(rm))
    };
    let m = factory.method("Scan", Default::default(), h);
    let m = m.out_arg(("results", "aa{sv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let mode: u32 = i.read()?;
        let d = fclone(minfo);
        d.set_eps_ue_mode_operation(mode)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetEpsUeModeOperation", Default::default(), h);
    let m = m.in_arg(("mode", "u"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let settings: arg::PropMap = i.read()?;
        let d = fclone(minfo);
        d.set_initial_eps_bearer_settings(settings)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SetInitialEpsBearerSettings", Default::default(), h);
    let m = m.in_arg(("settings", "a{sv}"));
    let i = i.add_m(m);

    let p = factory.property::<&str, _>("Imei", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.imei()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("RegistrationState", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.registration_state()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("OperatorCode", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.operator_code()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("OperatorName", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.operator_name()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("EnabledFacilityLocks", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.enabled_facility_locks()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("SubscriptionState", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.subscription_state()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("EpsUeModeOperation", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.eps_ue_mode_operation()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<(u32, bool, Vec<u8>)>, _>("Pco", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.pco()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<dbus::Path, _>("InitialEpsBearer", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.initial_eps_bearer()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<arg::PropMap, _>("InitialEpsBearerSettings", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.initial_eps_bearer_settings()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}

pub trait OrgFreedesktopModemManager1ModemFirmware {
    fn list(&self) -> Result<(String, Vec<arg::PropMap>), tree::MethodErr>;
    fn select(&self, uniqueid: &str) -> Result<(), tree::MethodErr>;
    fn update_settings(&self) -> Result<(u32, arg::PropMap), tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_firmware_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopModemManager1ModemFirmware,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Firmware", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let (selected, installed) = d.list()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(selected);
        let rm = rm.append1(installed);
        Ok(vec!(rm))
    };
    let m = factory.method("List", Default::default(), h);
    let m = m.out_arg(("selected", "s"));
    let m = m.out_arg(("installed", "aa{sv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let uniqueid: &str = i.read()?;
        let d = fclone(minfo);
        d.select(uniqueid)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Select", Default::default(), h);
    let m = m.in_arg(("uniqueid", "s"));
    let i = i.add_m(m);

    let p = factory.property::<(u32, arg::PropMap), _>("UpdateSettings", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.update_settings()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}

pub trait OrgFreedesktopModemManager1ModemSimple {
    fn connect(&self, properties: arg::PropMap) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn disconnect(&self, bearer: dbus::Path) -> Result<(), tree::MethodErr>;
    fn get_status(&self) -> Result<arg::PropMap, tree::MethodErr>;
}

pub fn org_freedesktop_modem_manager1_modem_simple_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgFreedesktopModemManager1ModemSimple,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.ModemManager1.Modem.Simple", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let properties: arg::PropMap = i.read()?;
        let d = fclone(minfo);
        let bearer = d.connect(properties)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(bearer);
        Ok(vec!(rm))
    };
    let m = factory.method("Connect", Default::default(), h);
    let m = m.in_arg(("properties", "a{sv}"));
    let m = m.out_arg(("bearer", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let bearer: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.disconnect(bearer)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Disconnect", Default::default(), h);
    let m = m.in_arg(("bearer", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let properties = d.get_status()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(properties);
        Ok(vec!(rm))
    };
    let m = factory.method("GetStatus", Default::default(), h);
    let m = m.out_arg(("properties", "a{sv}"));
    let i = i.add_m(m);
    i
}
